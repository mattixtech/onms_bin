#!/bin/bash
//usr/bin/env groovy -cp "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )" "$0" $@; exit $?
import groovy.cli.commons.CliBuilder
import groovy.cli.commons.OptionAccessor
import static ca.mattbrooks.tools.groovy.shell.ShellCommands.*

static def getOptions(String[] args) {
    def cli = new CliBuilder(usage: "update-smoke-containers", header: "Options:")
    cli.d(type: String, "Directory to download images to (overwrites existing)")
    cli.m(type: String, "Minion CircleCI build Id")
    cli.s(type: String, "Sentinel CircleCI build Id")
    cli.h(type: String, "Horizon CircleCI build Id")
    cli.n(type: Boolean, "Download but don't load into docker")

    def options = cli.parse(args)

    if (!options.d || (!options.m && !options.s && !options.h)) {
        cli.usage()
        System.exit(1)
    }

    return options
}

static def getImages(OptionAccessor options) {
    // Key is image name, value is CircleCI build Id
    def images = new HashMap()

    if (options.h)
        images.put("horizon.oci", options.h)

    if (options.s)
        images.put("sentinel.oci", options.s)

    if (options.m)
        images.put("minion.oci", options.m)

    return images
}

static def downloadImages(Map imageMap, String directory, String circleId) {
    // Download new images
    println("Downloading new images...")
    imageMap.entrySet().each {
        println("Downloading ${it.getKey()}...")
        runCommand("wget https://${it.getValue()}-${circleId}.circle-artifacts.com/0/${it.getKey()} -O ${directory}/${it.getKey()}", printStderrAndExit)
    }
}

static def importImages(Map imageMap, String directory) {
    // Import them into docker
    println("Importing into docker...")
    imageMap.entrySet().each {
        println("Importing ${it.getKey()}...")
        runCommand("docker image load -i ${directory}/${it.getKey()}", printStderrAndExit)
    }
}

// Seems like this is a fixed part of all the artifact download URLs
def circleId = "9377198-gh"

def options = getOptions(args), images = getImages(options)
runCommand("mkdir -p ${options.d}", printStderrAndExit)
downloadImages(images, options.d.toString(), circleId)

if (!options.n)
    importImages(images, options.d.toString())